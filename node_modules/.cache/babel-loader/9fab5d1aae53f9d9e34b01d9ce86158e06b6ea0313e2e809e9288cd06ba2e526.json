{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\JonsMendi\\\\Desktop\\\\Personal\\\\Coding-Challenges\\\\eye-able-chart\\\\eye-able-chart\\\\src\\\\components\\\\Chart\\\\Chart.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef } from \"react\";\nimport { drawXAxis, drawYAxis, drawBars } from '../helpers/chart-helpers';\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chart(_ref) {\n  _s();\n  let {\n    data,\n    yearFilter\n  } = _ref;\n  // create a reference to the SVG element\n  const svgRef = useRef(null);\n  useEffect(() => {\n    // select the SVG element using the reference\n    const svg = d3.select(svgRef.current);\n\n    // get the width and height of the SVG element\n    const width = svg.attr(\"width\");\n    const height = svg.attr(\"height\");\n\n    // define the margins for the chart\n    const margin = {\n      top: 20,\n      right: 20,\n      bottom: 30,\n      left: 50\n    };\n\n    // calculate the chart width and height after applying margins\n    const chartWidth = width - margin.left - margin.right;\n    const chartHeight = height - margin.top - margin.bottom;\n\n    // extract all the years from the data\n    const allYears = data.map(item => new Date(item.Year).getFullYear());\n    const numberPopulation = data.map(pops => pops.Population);\n    console.log(numberPopulation);\n\n    // filter the data based on the year filter, if any\n    const filteredData = data.filter(item => yearFilter ? new Date(item.Year).getFullYear() >= new Date().getFullYear() - yearFilter : true);\n\n    // create a scale for the x-axis\n    const x = d3.scaleBand().range([0, chartWidth]).padding(0.1).domain(allYears);\n\n    // create a scale for the y-axis\n    const y = d3.scaleLinear().range([chartHeight, 0]).domain([0, d3.max(filteredData, d => d.Population)]);\n    console.log(\"asasas\", y);\n\n    // create x-axis and y-axis using the scales\n    const xAxis = d3.axisBottom(x);\n    const yAxis = d3.axisLeft(y).tickFormat(d3.format(\".2s\"));\n\n    // call helper functions to draw the x-axis, y-axis and bars on the chart\n    drawXAxis(svg, chartHeight, xAxis);\n    drawYAxis(svg, yAxis, margin.left);\n    drawBars(svg, filteredData, x, y, chartHeight);\n\n    // append y-label\n    svg.append(\"text\").attr(\"transform\", \"rotate(-90)\").attr(\"y\", 0 - margin.left).attr(\"x\", 0 - chartHeight / 2).attr(\"dy\", \"1em\").style(\"text-anchor\", \"middle\").text(\"Population (millions)\");\n  }, [data, yearFilter]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: svgRef,\n    width: 500,\n    height: 300,\n    children: [/*#__PURE__*/_jsxDEV(\"g\", {\n      className: \"x-axis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n      className: \"y-axis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(Chart, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = Chart;\nexport default Chart;\nvar _c;\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"names":["useEffect","useRef","drawXAxis","drawYAxis","drawBars","d3","jsxDEV","_jsxDEV","Chart","_ref","_s","data","yearFilter","svgRef","svg","select","current","width","attr","height","margin","top","right","bottom","left","chartWidth","chartHeight","allYears","map","item","Date","Year","getFullYear","numberPopulation","pops","Population","console","log","filteredData","filter","x","scaleBand","range","padding","domain","y","scaleLinear","max","d","xAxis","axisBottom","yAxis","axisLeft","tickFormat","format","append","style","text","ref","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/JonsMendi/Desktop/Personal/Coding-Challenges/eye-able-chart/eye-able-chart/src/components/Chart/Chart.jsx"],"sourcesContent":["import { useEffect, useRef } from \"react\";\r\nimport { drawXAxis, drawYAxis, drawBars } from '../helpers/chart-helpers';\r\nimport * as d3 from \"d3\";\r\n\r\nfunction Chart({ data, yearFilter }) {\r\n  // create a reference to the SVG element\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // select the SVG element using the reference\r\n    const svg = d3.select(svgRef.current);\r\n  \r\n    // get the width and height of the SVG element\r\n    const width = svg.attr(\"width\");\r\n    const height = svg.attr(\"height\");\r\n  \r\n    // define the margins for the chart\r\n    const margin = { top: 20, right: 20, bottom: 30, left: 50 };\r\n  \r\n    // calculate the chart width and height after applying margins\r\n    const chartWidth = width - margin.left - margin.right;\r\n    const chartHeight = height - margin.top - margin.bottom;\r\n  \r\n    // extract all the years from the data\r\n    const allYears = data.map((item) => new Date(item.Year).getFullYear());\r\n\r\n    const numberPopulation = data.map((pops) => pops.Population);\r\n    console.log(numberPopulation)\r\n  \r\n    // filter the data based on the year filter, if any\r\n    const filteredData = data.filter(\r\n      (item) =>\r\n        yearFilter\r\n          ? new Date(item.Year).getFullYear() >=\r\n            new Date().getFullYear() - yearFilter\r\n          : true\r\n    );\r\n  \r\n    // create a scale for the x-axis\r\n    const x = d3\r\n      .scaleBand()\r\n      .range([0, chartWidth])\r\n      .padding(0.1)\r\n      .domain(allYears);\r\n  \r\n    // create a scale for the y-axis\r\n    const y = d3\r\n      .scaleLinear()\r\n      .range([chartHeight, 0])\r\n      .domain([0, d3.max(filteredData, (d) => d.Population)]);\r\n      console.log(\"asasas\", y)\r\n  \r\n    // create x-axis and y-axis using the scales\r\n    const xAxis = d3.axisBottom(x);\r\n    const yAxis = d3.axisLeft(y).tickFormat(d3.format(\".2s\"));\r\n  \r\n    // call helper functions to draw the x-axis, y-axis and bars on the chart\r\n    drawXAxis(svg, chartHeight, xAxis);\r\n    drawYAxis(svg, yAxis, margin.left);\r\n    drawBars(svg, filteredData, x, y, chartHeight);\r\n  \r\n    // append y-label\r\n    svg.append(\"text\")\r\n       .attr(\"transform\", \"rotate(-90)\")\r\n       .attr(\"y\", 0 - margin.left)\r\n       .attr(\"x\",0 - (chartHeight / 2))\r\n       .attr(\"dy\", \"1em\")\r\n       .style(\"text-anchor\", \"middle\")\r\n       .text(\"Population (millions)\");\r\n  \r\n  }, [data, yearFilter]);\r\n  \r\n\r\n  return (\r\n    <svg ref={svgRef} width={500} height={300}>\r\n      {/* create empty groups to hold the x-axis and y-axis */}\r\n      <g className=\"x-axis\" />\r\n      <g className=\"y-axis\" />\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default Chart;\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}