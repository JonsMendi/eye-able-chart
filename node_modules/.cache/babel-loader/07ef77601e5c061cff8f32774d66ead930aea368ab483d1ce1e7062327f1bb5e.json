{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\JonsMendi\\\\Desktop\\\\Personal\\\\Coding-Challenges\\\\eye-able-chart\\\\eye-able-chart\\\\src\\\\components\\\\Body.jsx\",\n  _s = $RefreshSig$();\nimport \"../App.css\";\nimport { useState, useEffect } from \"react\";\nimport Chart from \"./Chart/Chart\";\nimport BarChart from \"./Chart/BarChart\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Body() {\n  _s();\n  const [population, setPopulation] = useState([]);\n  const [yearFilter, setYearFilter] = useState(null);\n  const [userData, setUserData] = useState({\n    labels: [population.map(data => data.year)],\n    datasets: [{\n      label: \"Population\",\n      data: population.map(data => data.population)\n    }]\n  });\n  async function fetchPopulation() {\n    const response = await fetch('https://datausa.io/api/data?drilldowns=Nation&measures=Population');\n    const data = await response.json();\n    setPopulation(data.data);\n  }\n  useEffect(() => {\n    fetchPopulation();\n  }, []);\n  function handleYearFilterChange(event) {\n    setYearFilter(parseInt(event.target.value));\n  }\n  const renderPopulation = population.filter(item => yearFilter ? new Date(item.Year).getFullYear() >= new Date().getFullYear() - yearFilter : true).map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"Country: \", item.Nation]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"Population: \", item.Population]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"Year: \", item.Year]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 7\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"USA Population\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n      chartData: userData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(Body, \"/GdcUvaT6QI9bvN8sHnyF3LCwrQ=\");\n_c = Body;\nexport default Body;\nvar _c;\n$RefreshReg$(_c, \"Body\");","map":{"version":3,"names":["useState","useEffect","Chart","BarChart","jsxDEV","_jsxDEV","Body","_s","population","setPopulation","yearFilter","setYearFilter","userData","setUserData","labels","map","data","year","datasets","label","fetchPopulation","response","fetch","json","handleYearFilterChange","event","parseInt","target","value","renderPopulation","filter","item","Date","Year","getFullYear","index","children","Nation","fileName","_jsxFileName","lineNumber","columnNumber","Population","className","chartData","_c","$RefreshReg$"],"sources":["C:/Users/JonsMendi/Desktop/Personal/Coding-Challenges/eye-able-chart/eye-able-chart/src/components/Body.jsx"],"sourcesContent":["import \"../App.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Chart from \"./Chart/Chart\";\r\nimport BarChart from \"./Chart/BarChart\";\r\n\r\nfunction Body() {\r\n  const [population, setPopulation] = useState([]);\r\n  const [yearFilter, setYearFilter] = useState(null);\r\n  const [userData, setUserData] = useState({\r\n    labels: [population.map((data) => data.year)], \r\n    datasets: [{\r\n      label: \"Population\",\r\n      data: population.map((data) => data.population)\r\n    }]\r\n  })\r\n\r\n  async function fetchPopulation() {\r\n    const response = await fetch('https://datausa.io/api/data?drilldowns=Nation&measures=Population');\r\n    const data = await response.json();\r\n    setPopulation(data.data);\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchPopulation();\r\n  }, []);\r\n\r\n  function handleYearFilterChange(event) {\r\n    setYearFilter(parseInt(event.target.value));\r\n  }\r\n\r\n  const renderPopulation = population\r\n    .filter(item => yearFilter ? new Date(item.Year).getFullYear() >= (new Date().getFullYear() - yearFilter) : true)\r\n    .map((item, index) => (\r\n      <div key={index}>\r\n        <span>Country: {item.Nation}</span>\r\n        <span>Population: {item.Population}</span>\r\n        <span>Year: {item.Year}</span>\r\n      </div>\r\n    ));\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>USA Population</h1>\r\n      {/* <label>\r\n        Filter by year:\r\n        <select defaultValue=\"\" onChange={handleYearFilterChange}>\r\n          <option value={null}>All</option>\r\n          <option value={3}>Last 3 years</option>\r\n          <option value={5}>Last 5 years</option>\r\n          <option value={10}>Last 10 years</option>\r\n        </select>\r\n      </label> */}\r\n      {/* <div>{renderPopulation}</div> */}\r\n      <BarChart chartData={userData} /> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Body;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}